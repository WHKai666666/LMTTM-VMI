'''
这段代码完全参考了
https://github.com/rishikksh20/ViViT-pytorch
输入shape [1, 16, 3, 224, 224])
B,frame_nunm,C,H,W
输出[B,class_num]
'''
import torch
from torch import nn, einsum
import torch.nn.functional as F
from einops import rearrange, repeat
from einops.layers.torch import Rearrange
from module import Attention, PreNorm, FeedForward
import numpy as np

class Transformer(nn.Module):
    def __init__(self, dim, depth, heads, dim_head, mlp_dim, dropout = 0.):
        super().__init__()
        self.layers = nn.ModuleList([])
        self.norm = nn.LayerNorm(dim)
        for _ in range(depth):
            self.layers.append(nn.ModuleList([
                PreNorm(dim, Attention(dim, heads = heads, dim_head = dim_head, dropout = dropout)),
                PreNorm(dim, FeedForward(dim, mlp_dim, dropout = dropout))
            ]))

    def forward(self, x):
        for attn, ff in self.layers:
            x = attn(x) + x
            x = ff(x) + x
        return self.norm(x)


  
class ViViT(nn.Module):
    def __init__(self, image_size=28, patch_size=4, num_classes=11, num_frames=28, dim = 192, depth = 4, heads = 3, pool = 'mean', in_channels = 1, dim_head = 64, dropout = 0.,
                 emb_dropout = 0., scale_dim = 4, ):
        super().__init__()
        
        assert pool in {'cls', 'mean'}, 'pool type must be either cls (cls token) or mean (mean pooling)'


        assert image_size % patch_size == 0, 'Image dimensions must be divisible by the patch size.'
        num_patches = (image_size // patch_size) ** 2
        patch_dim = in_channels * patch_size ** 2
        self.to_patch_embedding = nn.Sequential(
            Rearrange('b t c (h p1) (w p2) -> b t (h w) (p1 p2 c)', p1 = patch_size, p2 = patch_size),
            nn.Linear(patch_dim, dim),
        )

        self.pos_embedding = nn.Parameter(torch.randn(1, num_frames, num_patches + 1, dim))
        self.space_token = nn.Parameter(torch.randn(1, 1, dim))
        self.space_transformer = Transformer(dim, depth, heads, dim_head, dim*scale_dim, dropout)

        self.temporal_token = nn.Parameter(torch.randn(1, 1, dim))
        self.temporal_transformer = Transformer(dim, depth, heads, dim_head, dim*scale_dim, dropout)

        self.dropout = nn.Dropout(emb_dropout)
        self.pool = pool

        self.mlp_head = nn.Sequential(
            nn.LayerNorm(dim),
            nn.Linear(dim, num_classes)
        )

    def forward(self, x):
        x = self.to_patch_embedding(x)
        b, t, n, _ = x.shape

        cls_space_tokens = repeat(self.space_token, '() n d -> b t n d', b = b, t=t)
        x = torch.cat((cls_space_tokens, x), dim=2)
        x += self.pos_embedding[:, :, :(n + 1)]
        x = self.dropout(x)

        x = rearrange(x, 'b t n d -> (b t) n d')
        x = self.space_transformer(x)
        x = rearrange(x[:, 0], '(b t) ... -> b t ...', b=b)

        cls_temporal_tokens = repeat(self.temporal_token, '() n d -> b n d', b=b)
        x = torch.cat((cls_temporal_tokens, x), dim=1) #这里得到了B,token_num,dim   可以从这里介入TTM

        x = self.temporal_transformer(x)
        

        x = x.mean(dim = 1) if self.pool == 'mean' else x[:, 0]

        return self.mlp_head(x)
    
    
    

if __name__ == "__main__":
    import medmnist
    import torchvision.transforms as transforms
    from medmnist import INFO, Evaluator
    import torch.utils.data as data
    BATCH_SIZE=20
    data_flag="organmnist3d"
    download = False
    root=r'C:\Users\BYounng\Documents\vscode\vivit\data'
    info = INFO[data_flag]
    task = info['task']
    n_channels = info['n_channels']
    n_classes = len(info['label'])
    DataClass = getattr(medmnist, info['python_class'])

    train_dataset = DataClass(split='train',root=root, download=download)
    test_dataset = DataClass(split='test',root=root, download=download)
    valid_dataset = DataClass(split='val',root=root, download=download)
    train_loader=data.DataLoader(train_dataset,batch_size=BATCH_SIZE,shuffle=True)

    # img = torch.ones([1, 28, 1, 28, 28]).cuda()
    
    model = ViViT().cuda()
    parameters = filter(lambda p: p.requires_grad, model.parameters())
    parameters = sum([np.prod(p.size()) for p in parameters]) / 1_000_000
    print('Trainable Parameters: %.3fM' % parameters)
    

    
     # [B, num_classes]
    import tqdm
    from torch.utils.tensorboard import SummaryWriter
    loger=SummaryWriter("tet_new_test")
    optim=torch.optim.AdamW(model.parameters(),1e-4,weight_decay=1e-5)
    cit=nn.CrossEntropyLoss()
    losses=[]
    flag=1
    for i in range(200):
        for x,y in tqdm.tqdm(train_loader):
            # x = x.type(torch.float32)
            x=x.permute(0,2,1,3,4)
            # x = rearrange(x, 'b t c h w -> b c t h w')
            x=x.to("cuda",dtype=torch.float32)
            y=y.to("cuda",dtype=torch.long)
            # y=y.type(torch.long)
            optim.zero_grad()
            out=model(x)
            loss=cit(out,y.squeeze(1))
            losses.append(loss.item())
            loss.backward()
            optim.step()
            loger.add_scalar("loss per step ",loss.item(),flag)
            if flag%100==0:
                save_loss=sum(losses)/len(losses)
                loger.add_scalar("loss per 100 step ",save_loss,flag)
                losses=[]
                # torch.save(vivi.state_dict(),f"num_{flag}_loss{save_loss}.pth")
            flag+=1


    
    
